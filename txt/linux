1. you can download the source for linux	
   - https://github.com/torvalds/linux	
   - sources for almost all software on linux also available	
   - windows: closed source, can't view	

2. you can install updates without rebooting your machine	
   - true for most software	
   - true of even the kernel itself on > 4.0	
   - windows: requires reboot	

3. you can plug devices in without worrying about finding/downloading drivers	
   - exception: some highly specialized devices	
   - windows: requires download	

4. you can run linux from a pen drive, cd, dvd, etc.	
   - windows: no such option exists	

5. you can run linux for years without rebooting	
   - ultra stable	
   - less memory fragmentation	
   - windows: system becomes slow over time	

6. you can run linux on almost any hardware	
   - this includes computers/laptops from the 80s and 90s	
   - windows: minimum requirements often alienate hardware	

7. you can fix broken linux installs with a live cd	
   - sometimes broken windows can be fixed with a linux live cd	
   - windows: system repair is only option	

8. you can update all of your software often with a single command	
   - windows: windows update only updates windows	

9. you can move a hard drive from one linux machine to another	
   - largely made possible by not needing specific drivers	
   - windows: system often will not function properly	
   - windows: moving a hard drive often requiers a new license as well	

10. you can customize quite literally anything	
   - fonts, icons, themes, etc.	
   - there are even windows and mac themes on linux	
   - windows: some customization is available, but not near the extent of linux	

11. you can install software without worrying about viruses and malware	
   - implies also that no anti-virus software is needed	
   - software from official respositories will never contain malicious software	


#!/bin/bash
##############################################################################
# SHORTCUTS and HISTORY
##############################################################################

CTRL+A  # move to beginning of line
CTRL+B  # moves backward one character
CTRL+C  # halts the current command
CTRL+D  # deletes one character backward or logs out of current session, similar to exit
CTRL+E  # moves to end of line
CTRL+F  # moves forward one character
CTRL+G  # aborts the current editing command and ring the terminal bell
CTRL+H  # deletes one character under cursor (same as DELETE)
CTRL+J  # same as RETURN
CTRL+K  # deletes (kill) forward to end of line
CTRL+L  # clears screen and redisplay the line
CTRL+M  # same as RETURN
CTRL+N  # next line in command history
CTRL+O  # same as RETURN, then displays next line in history file
CTRL+P  # previous line in command history
CTRL+R  # searches backward
CTRL+S  # searches forward
CTRL+T  # transposes two characters
CTRL+U  # kills backward from point to the beginning of line
CTRL+V  # makes the next character typed verbatim
CTRL+W  # kills the word behind the cursor
CTRL+X  # lists the possible filename completions of the current word
CTRL+Y  # retrieves (yank) last item killed
CTRL+Z  # stops the current command, resume with fg in the foreground or bg in the background

ALT+B   # moves backward one word
ALT+D   # deletes next word
ALT+F   # moves forward one word
ALT+H   # deletes one character backward

BACKSPACE  # deletes one character backward
DELETE     # deletes one character under cursor

history   # shows command line history
!!        # repeats the last command
!<n>      # refers to command line 'n'
!<string> # refers to command starting with 'string'

exit      # logs out of current session
man <command>            # shows the manual for specified command

##############################################################################
# BASH BASICS
##############################################################################

env                 # displays all environment variables

echo $SHELL         # displays the shell you're using
echo $BASH_VERSION  # displays bash version

bash                # if you want to use bash (type exit to go back to your previously opened shell)
whereis bash        # locates the binary, source and manual-page for a command
which bash          # finds out which program is executed as 'bash' (default: /bin/bash, can change across environments)

clear               # clears content on window (hide displayed lines)


##############################################################################
# FILE COMMANDS
##############################################################################


ls                            # lists your files in current directory, ls <dir> to print files in a specific directory
ls -l                         # lists your files in 'long format', which contains the exact size of the file, who owns the file and who has the right to look at it, and when it was last modified
ls -a                         # lists all files in 'long format', including hidden files (name beginning with '.')
ln -s <filename> <link>       # creates symbolic link to file
touch <filename>              # creates or updates (edit) your file
cat <filename>                # prints file raw content (will not be interpreted)
any_command > <filename>      # '>' is used to perform redirections, it will set any_command's stdout to file instead of "real stdout" (generally /dev/stdout)
more <filename>               # shows the first part of a file (move with space and type q to quit)
head <filename>               # outputs the first lines of file (default: 10 lines)
tail <filename>               # outputs the last lines of file (useful with -f option) (default: 10 lines)
vim <filename>                # opens a file in VIM (VI iMproved) text editor, will create it if it doesn't exist
mv <filename1> <dest>         # moves a file to destination, behavior will change based on 'dest' type (dir: file is placed into dir; file: file will replace dest (tip: useful for renaming))
cp <filename1> <dest>         # copies a file
rm <filename>                 # removes a file
find . -name <name> <type>    # searches for a file or a directory in the current directory and all its sub-directories by its name
diff <filename1> <filename2>  # compares files, and shows where they differ
wc <filename>                 # tells you how many lines, words and characters there are in a file. Use -lwc (lines, word, character) to ouput only 1 of those informations
sort <filename>               # sorts the contents of a text file line by line in alphabetical order, use -n for numeric sort and -r for reversing order.
sort -t -k <filename>         # sorts the contents on specific sort key field starting from 1, using the field separator t.
chmod -options <filename>     # lets you change the read, write, and execute permissions on your files (more infos: SUID, GUID)
gzip <filename>               # compresses files using gzip algorithm
gunzip <filename>             # uncompresses files compressed by gzip
gzcat <filename>              # lets you look at gzipped file without actually having to gunzip it
lpr <filename>                # prints the file
lpq                           # checks out the printer queue
lprm <jobnumber>              # removes something from the printer queue
genscript                     # converts plain text files into postscript for printing and gives you some options for formatting
dvips <filename>              # prints .dvi files (i.e. files produced by LaTeX)
grep <pattern> <filenames>    # looks for the string in the files
grep -r <pattern> <dir>       # search recursively for pattern in directory
head -n file_name | tail +n   # Print nth line from file.
head -y lines.txt | tail +x   # want to display all the lines from x to y. This includes the xth and yth lines.


##############################################################################
# DIRECTORY COMMANDS
##############################################################################


mkdir <dirname>               # makes a new directory
rmdir <dirname>               # remove an empty directory
rmdir -rf <dirname>           # remove a non-empty directory
mv <dir1> <dir2>              # rename a directory from <dir1> to <dir2>
cd                            # changes to home
cd ..                         # changes to the parent directory
cd <dirname>                  # changes directory
cp -r <dir1> <dir2>           # copy <dir1> into <dir2> including sub-directories
pwd                           # tells you where you currently are
cd ~                          # changes to home.


##############################################################################
# TIPS & TRICKS
##############################################################################


# redo last command but as root	
sudo !! 

# set path to newly made dir
mkdir -p /path/to/new/dir	
cd !$ 	

# open an editor to run a command	
CTRL+X+E

# create a super fast ram disk (might have to use as superuser - sudo)
mkdir -p /mnt/ram	
mount -t tmpfs tmpfs /mnt/ram -o size=8192M	

# don't add command to history (note the leading space)	
 ls -l	

# fix a really long command that you messed up	
fc 

# quickly create folders	
mkdir -p folder/{sub1,sub2}/{sub1,sub2,sub3}	

# bonus: exit terminal but leave all processes running	
disown -a && exit	

